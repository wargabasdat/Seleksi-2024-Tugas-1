# -*- coding: utf-8 -*-
"""src.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/159IGjr-dPBRsra2f1FzUAxxr5oqeSckW
"""

import requests
from bs4 import BeautifulSoup
import json
import csv

# checking html content
url = "https://genshin.gg/"
r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser')
print(soup.prettify())

# collection all character names
character_name_soup = soup.find_all('h2', class_='character-name')
character_names = [name.get_text(strip=True) for name in character_name_soup]

character_names.remove('Sigewinne')
character_names.remove('Aloy')

character_names_url = [name.replace(" ", "").lower() for name in character_names] #for url purposes
# print(character_names)
print(character_names_url)

# checking html content
temp_url = "https://genshin.gg/characters/hutao/"
temp_r = requests.get(temp_url)
temp_soup = BeautifulSoup(temp_r.content, 'html.parser')
print(temp_soup.prettify())

character = []
element = []
weapon_type = []
role = []
materials_item = []
weapon = []
talent = []
passive = []
constellation = []

i = 0

for char_url in character_names_url:
  # requesting character web page
  temp_url = "https://genshin.gg/characters/"+ char_url +"/"
  temp_r = requests.get(temp_url)
  temp_soup = BeautifulSoup(temp_r.content, 'html.parser')

  # extract rarity
  portrait_img = temp_soup.find('img', class_='character-portrait')
  rarity_class = next((cls for cls in portrait_img['class'] if 'rarity-' in cls), None) if portrait_img else None

  # extract element
  element_img = temp_soup.find('img', class_='character-element')
  element_name = element_img['alt'] if element_img else None
  if not {"name":element_name} in element:
    element.append({"name":element_name})

  # extract weapon type
  character_weapon_type = temp_soup.find('div', class_='character-path').get_text(strip=True)
  if not {"name":character_weapon_type} in weapon_type:
    weapon_type.append({"name":character_weapon_type})

  # extract role
  character_role = temp_soup.find('div', class_='character-role').get_text(strip=True)
  if not {"name":character_role} in role:
    role.append({"name":character_role})

  # extract material items
  character_materials_item_soup = temp_soup.find_all('div', class_='character-materials-item')
  character_materials_item = [item.get_text(strip=True) for item in character_materials_item_soup]
  for item in character_materials_item:
    if not ({"name":item} in materials_item):
      materials_item.append({"name":item})

  # extract best weapons
  character_weapon_soup = temp_soup.find_all('div', class_='character-build-weapon-name', limit=5)
  character_weapon = [item.get_text(strip=True).split('R')[0].strip() for item in character_weapon_soup]
  for item in character_weapon:
    if not ({"name":item} in weapon):
      weapon.append({"name":item})

  # extract talents
  talent_div = temp_soup.find('div', id='talents')
  character_talent_soup = talent_div.find_all('h4', class_='character-skill-name')
  character_talent_body_soup = talent_div.find_all('h3', class_='character-skill-title')
  character_talent_desc_soup = talent_div.find_all('div', class_='character-skill-description')
  character_talent = [item.get_text(strip=True) for item in character_talent_soup]
  character_talent_body = [item.get_text(strip=True) for item in character_talent_body_soup]
  character_talent_desc = [item.get_text(strip=True, separator=" ") for item in character_talent_desc_soup]
  for item,body,desc in zip(character_talent,character_talent_body,character_talent_desc):
    if not ({"name":item,"type":body,"desc":desc} in talent):
      talent.append({"name":item,"type":body,"desc":desc})

  # extract passives
  passive_div = temp_soup.find('div', id='passives')
  character_passive_soup = passive_div.find_all('h4', class_='character-skill-name')
  character_passive_body_soup = passive_div.find_all('h3', class_='character-skill-title')
  character_passive_desc_soup = passive_div.find_all('div', class_='character-skill-description')
  character_passive = [item.get_text(strip=True) for item in character_passive_soup]
  character_passive_body = [item.get_text(strip=True) for item in character_passive_body_soup]
  character_passive_desc = [item.get_text(strip=True, separator=" ") for item in character_passive_desc_soup]
  for item,body,desc in zip(character_passive,character_passive_body,character_passive_desc):
    if not ({"name":item,"type":body,"desc":desc} in passive):
      passive.append({"name":item,"type":body,"desc":desc})

  # extract constelation
  constellation_div = temp_soup.find('div', id='constellations')
  character_constellation_soup = constellation_div.find_all('h4', class_='character-skill-name')
  character_constellation_body_soup = constellation_div.find_all('h3', class_='character-skill-title')
  character_constellation_desc_soup = constellation_div.find_all('div', class_='character-skill-description')
  character_constellation = [item.get_text(strip=True) for item in character_constellation_soup]
  character_constellation_body = [item.get_text(strip=True) for item in character_constellation_body_soup]
  character_constellation_desc = [item.get_text(strip=True, separator=" ") for item in character_constellation_desc_soup]
  for item,body,desc in zip(character_constellation,character_constellation_body,character_constellation_desc):
    if not ({"name":item,"type":body,"desc":desc} in constellation):
      constellation.append({"name":item,"type":body,"desc":desc})

  character.append({"name":character_names[i], "rarity":rarity_class, "element":element_name, "weapon_type":character_weapon_type, "role":character_role})
  i += 1

  print(char_url)

print("character data complete")

temp_url = "https://genshin.gg/weapons/"
temp_r = requests.get(temp_url)
temp_soup = BeautifulSoup(temp_r.content, 'html.parser')

weapon_data = []
row_groups = temp_soup.find_all('div', class_='rt-tr-group')

# extract weapons

for group in row_groups:
    rows = group.find_all('div', class_='rt-tr')
    for row in rows:
        cells = row.find_all('div', class_='rt-td')
        if len(cells) >= 6:
            weapon_name = cells[0].get_text(strip=True)
            weapon_type_img = cells[1].find('img')
            if weapon_type_img:
                weapon_type_src = weapon_type_img['src']
                weapon_type_name = weapon_type_src.split('/')[-1].split('.')[0].split('_')[1]
            rarity_img = cells[2].find('img')['src']
            rarity = f"rarity-{rarity_img.split('_')[-1].split('.')[0]}"
            base_attack = int(cells[3].get_text(strip=True))
            sub_stat = cells[4].get_text(strip=True)
            source = cells[5].get_text(strip=True)
            weapon_data.append({
                "name": weapon_name,
                "type": weapon_type_name,
                "rarity": rarity,
                "atk": base_attack,
                "secondary": sub_stat,
                "drop": source
            })

print("weapon data complete")

# save json file_path
folder = "../data/"
json_file_path = ['character_data.json', 'element_data.json', 'weapon_type_data.json', 'role_data.json', 'materials_item_data.json', 'weapon_data.json', 'talent_data.json', 'passive_data.json', 'constellation_data.json', ]
array_list = [character, element, weapon_type, role, materials_item, weapon_data, talent, passive, constellation]

i = 0

for path in json_file_path:
  with open(folder+path, 'w') as json_file:
      json.dump(array_list[i], json_file, indent=4)
  i += 1

print("json file complete")